
<CoreButtonIcon>:
    text: root.icon_markup if root.icon_markup else ''
    markup: True
    color: 1, 1, 1, 1


<CoreButton>:
    color: root.text_color
    disabled_color: root.disabled_text_color
    background_normal: ''
    markup: True

    canvas.before:
        PushMatrix

        # Rotate
        Rotate:
            angle: self.angle
            origin: self._background_origin
        
        # Shadow
        Color:
            rgba: root.shadow_color
        BoxShadow:
            pos: self.pos if not isinstance(self, RelativeLayout) else (0, 0)
            size: self.size
            offset: root.shadow_offset
            spread_radius: -(root.shadow_softness[0]), -(root.shadow_softness[1])
            blur_radius: root.elevation_levels[root.elevation]
            border_radius: root.radius

        # Background
        Color:
            rgba: self.background_color

        SmoothRoundedRectangle:
            size: self.size
            pos: self.pos if not isinstance(self, RelativeLayout) else (0, 0)
            radius: root.radius

        # icon
        Color:
            rgba: root.icon_color if root.icon_texture else [0, 0, 0, 0]
        Rectangle:
            texture: root.icon_texture.texture if root.icon_texture else None
            size: root.icon_size, root.icon_size
            pos:
                ( \
                # trailing
                (self.right - root.icon_size - dp(5), self.center_y - root.icon_size / 2) if root.icon_position == 'trailing' else \
                # trailing_text
                (self.center_x + self.texture_size[0] / 2, self.center_y - root.icon_size / 2) if root.icon_position == 'trailing_text' else \
                # leading
                (self.x + dp(5), self.center_y - root.icon_size / 2) if root.icon_position == 'leading' else \
                # leading_text
                (self.center_x - self.texture_size[0] / 2 - root.icon_size, self.center_y - root.icon_size / 2) if root.icon_position == 'leading_text' else \
                # manual position
                self.icon_pos \
                )

        # Border
        Color:
            rgba: self.border_color if self.border_color else (0, 0, 0, 0)
        SmoothLine:
            width: root.border_width
            rounded_rectangle:
                [ \
                0,
                0, \
                self.width, \
                self.height, \
                *self.radius, \
                ] \
                if isinstance(self, RelativeLayout) else \
                [ \
                self.x,
                self.y, \
                self.width, \
                self.height, \
                *self.radius, \
                ]
        PopMatrix


